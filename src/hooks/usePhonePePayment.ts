import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export interface PaymentData {
  amount: number;
  orderId: string;
  customerName: string;
  customerPhone: string;
  customerEmail?: string;
  deliveryAddress?: string;
}

export interface PaymentResponse {
  success: boolean;
  paymentUrl?: string;
  transactionId?: string;
  error?: string;
}

export const usePhonePePayment = () => {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const initiatePayment = async (paymentData: PaymentData): Promise<PaymentResponse> => {
    setIsLoading(true);
    
    try {
      // Create order in database first
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        throw new Error('User not authenticated');
      }

      // Get customer profile
      const { data: customer, error: customerError } = await supabase
        .from('customers')
        .select('*')
        .eq('user_id', session.user.id)
        .single();

      if (customerError) throw customerError;

      // Create order record (order_number will be auto-generated by trigger)
      const { data: order, error: orderError } = await supabase
        .from('orders')
        .insert({
          customer_id: customer.id,
          total_amount: paymentData.amount,
          currency: 'INR',
          status: 'pending',
          payment_status: 'pending',
          delivery_address: paymentData.deliveryAddress || null,
          order_number: 'TEMP' // Will be overridden by database trigger
        })
        .select()
        .single();

      if (orderError) throw orderError;

      // Call PhonePe payment edge function
      const { data: paymentResponse, error: paymentError } = await supabase.functions.invoke('create-phonepe-payment', {
        body: {
          orderId: order.id,
          amount: paymentData.amount,
          customerName: paymentData.customerName,
          customerPhone: paymentData.customerPhone,
          customerEmail: paymentData.customerEmail,
          redirectUrl: `${window.location.origin}/payment-success`,
          callbackUrl: `${window.location.origin}/payment-callback`
        }
      });

      if (paymentError) throw paymentError;

      if (paymentResponse.success) {
        // Create payment record
        await supabase
          .from('payments')
          .insert({
            order_id: order.id,
            customer_id: customer.id,
            amount: paymentData.amount,
            currency: 'INR',
            payment_method: 'PhonePe',
            status: 'pending',
            gateway_transaction_id: paymentResponse.transactionId
          });

        toast({
          title: "Payment Initiated",
          description: "Redirecting to PhonePe payment gateway...",
        });

        return {
          success: true,
          paymentUrl: paymentResponse.paymentUrl,
          transactionId: paymentResponse.transactionId
        };
      } else {
        throw new Error(paymentResponse.error || 'Payment initiation failed');
      }
    } catch (error: any) {
      console.error('Payment initiation error:', error);
      toast({
        title: "Payment Failed",
        description: error.message || "Unable to initiate payment. Please try again.",
        variant: "destructive",
      });
      return { success: false, error: error.message };
    } finally {
      setIsLoading(false);
    }
  };

  const verifyPayment = async (transactionId: string): Promise<{ success: boolean; status: string }> => {
    try {
      const { data: response, error } = await supabase.functions.invoke('verify-phonepe-payment', {
        body: { transactionId }
      });

      if (error) throw error;

      // Update payment status based on verification
      if (response.success) {
        await supabase
          .from('payments')
          .update({
            status: response.status === 'SUCCESS' ? 'paid' : 'failed',
            gateway_response: response.data
          })
          .eq('gateway_transaction_id', transactionId);

        // Update order status if payment successful
        if (response.status === 'SUCCESS') {
          await supabase
            .from('orders')
            .update({
              status: 'confirmed',
              payment_status: 'paid'
            })
            .eq('id', response.orderId);
        }
      }

      return {
        success: response.success,
        status: response.status
      };
    } catch (error: any) {
      console.error('Payment verification error:', error);
      return { success: false, status: 'FAILED' };
    }
  };

  return {
    initiatePayment,
    verifyPayment,
    isLoading
  };
};